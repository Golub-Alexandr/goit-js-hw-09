{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAYH,EAAKE,cAAc,yBAErCF,EAAKI,iBAAiB,UAAUC,MAAOC,IACrCA,EAAEC,iBAGF,MAAMC,EAAQC,SAAST,EAAKU,SAASC,MAAMC,OACrCC,EAAOJ,SAAST,EAAKU,SAASG,KAAKD,OACnCE,EAASL,SAAST,EAAKU,SAASI,OAAOF,OAG7C,GAAIG,MAAMP,IAAUO,MAAMF,IAASE,MAAMD,IAAWN,GAAS,GAAKK,EAAO,GAAKC,EAAS,EACrF,OAAOE,EAAAlB,GAASmB,OAAOC,QACrB,SACA,iDACA,aAKJf,EAAUgB,UAAW,EAErB,IAEE,MAAMC,EAAWC,MAAMC,KAAK,CAAEC,OAAQT,IAAU,CAACU,EAAGC,KAAMC,OAkBvCC,EAlBqDF,EAkB3Cd,EAlB8CH,EAAQK,EAAOY,EAmBrF,IAAIG,SAAQ,CAACC,EAAKC,KACvB,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EAEFF,EAAI,CAAEF,SAAUA,EAAW,E,MAAGhB,IAG9BmB,EAAI,CAAEH,SAAUA,EAAW,E,MAAGhB,GAAQ,GAEvCA,EAAM,IAZb,IAAuBgB,EAAUhB,CAlB+D,UACtFiB,QAAQO,IAAIf,EAASgB,KAAKC,GAC9BA,EAAEC,MAAK,EAACX,SAAEA,EAAQhB,MAAEA,MAClBK,EAAAlB,GAASyC,OAAOC,QAAQ,uBAAqBb,QAAiBhB,MAAU,IACvE8B,OAAM,EAACd,SAAEA,EAAQhB,MAAEA,MACpBK,EAAAlB,GAASyC,OAAOG,QAAQ,sBAAoBf,QAAehB,MAAU,OAKzER,EAAUgB,UAAW,C,CACrB,MAAOwB,GAEP3B,EAAAlB,GAASyC,OAAOG,QAAQ,yDACxBE,QAAQD,MAAMA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst submitBtn = form.querySelector('button[type=\"submit\"]');\n\nform.addEventListener('submit', async (e) => {\n  e.preventDefault();\n  \n  // Get input values and parse to integers\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  // Check if values are not valid\n  if (isNaN(delay) || isNaN(step) || isNaN(amount) || delay <= 0 || step < 0 || amount < 0) {\n    return Notiflix.Report.warning(\n      'Error!',\n      'Incorrect input values. Enter positive numbers',\n      'Try again'\n    );\n  }\n\n  // Disable submit button\n  submitBtn.disabled = true;\n\n  try {\n    // Create promises and show notifications\n    const promises = Array.from({ length: amount }, (_, i) => createPromise(i, delay + step * i));\n    await Promise.all(promises.map((p) =>\n      p.then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n    ));\n\n    // Enable submit button\n    submitBtn.disabled = false;\n  } catch (error) {\n    // Handle unexpected errors\n    Notiflix.Notify.failure('An unexpected error occurred. Please try again later.');\n    console.error(error);\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        res({ position: position + 1, delay });\n      } else {\n        // Reject\n        rej({ position: position + 1, delay });\n      }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$submitBtn","addEventListener","async","e","preventDefault","delay1","parseInt","elements","delay","value","step","amount","isNaN","$parcel$interopDefault","Report","warning","disabled","promises","Array","from","length","_","i","$47d4ff9957288465$var$createPromise","position","Promise","res","rej","shouldResolve","Math","random","setTimeout","all","map","p","then","Notify","success","catch","failure","error","console"],"version":3,"file":"03-promises.3004e278.js.map"}